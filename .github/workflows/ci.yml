name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --only main,dev

    - name: Run linting
      run: |
        poetry run black --check src tests
        poetry run ruff check src tests
        poetry run mypy src

    - name: Run tests
      run: |
        poetry run pytest tests/ --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker image
      env:
        AIRFLOW_ADMIN_USER: ${{ secrets.AIRFLOW_ADMIN_USER }}
        AIRFLOW_ADMIN_PASSWORD: ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}
        AIRFLOW_ADMIN_EMAIL: ${{ secrets.AIRFLOW_ADMIN_EMAIL }}
        AIRFLOW_WEBSERVER_SECRET_KEY: ${{ secrets.AIRFLOW_WEBSERVER_SECRET_KEY }}
        AIRFLOW_FERNET_KEY: ${{ secrets.AIRFLOW_FERNET_KEY }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      run: |
        docker compose build
        docker compose up -d
        echo "Waiting for Airflow to start..."
        sleep 60
        echo "Container status:"
        docker compose ps
        echo "Airflow logs:"
        docker compose logs airflow --tail=20
        echo "Checking Airflow health..."
        for i in {1..10}; do
          if curl -f http://host.docker.internal:8080/health > /dev/null 2>&1; then
            echo "Airflow is healthy!"
            break
          fi
          echo "Attempt $i: Airflow not ready yet, waiting..."
          sleep 10
        done
        echo "Final health check..."
        # Try multiple approaches to check Airflow health
        if curl -f http://host.docker.internal:8080/health > /dev/null 2>&1; then
          echo "Airflow health check passed via host.docker.internal"
        elif curl -f http://127.0.0.1:8080/health > /dev/null 2>&1; then
          echo "Airflow health check passed via 127.0.0.1"
        elif curl -f http://localhost:8080/health > /dev/null 2>&1; then
          echo "Airflow health check passed via localhost"
        else
          echo "All health check attempts failed"
          exit 1
        fi
        docker compose down 